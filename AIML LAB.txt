KNN

from sklearn.datasets import load_iris
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
import numpy as np

dataset=load_iris()
X_train,X_test,y_train,y_test=train_test_split(dataset["data"],dataset["target"],random_state=0)



kn=KNeighborsClassifier(n_neighbors=1)
kn.fit(X_train,y_train)

for i in range(len(X_test)):
    x=X_test[i]
    x_new=np.array([x]) 
    prediction=kn.predict(x_new)
    print("TARGET=",y_test[i],dataset["target_names"][y_test[i]],"PREDICTED=",prediction,dataset["target_names"][prediction])
print(kn.score(X_test,y_test))




LWR

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


def local_regression(x0,X,y,tau):
    x0=np.r_[1,x0] 
    X=np.c_[np.ones(len(X)),X]
    xw=X.T*radial_kernel(x0,X,tau)
    beta=np.linalg.pinv(xw @ X) @ xw @ y
    return x0 @ beta


print(np.r_[np.array([1,2,3]),0,0,0,np.array([4,5,6])])
print(np.c_[np.array([1,2,3]),np.array([4,5,6])])

def radial_kernel(x0,X,tau):
    return np.exp(np.sum((X-x0)**2,axis=1)/(-2*tau*tau))

data=pd.read_csv("tips.csv")
print(data)

bill=data.total_bill.values
print(bill)


tip=data.tip.values
print(tip)

tau=10
ypred=np.array([local_regression(x0,bill,tip,tau) for x0 in bill])
print("YPRED",ypred)


SortIndex=bill.argsort(0)
xsort=bill[SortIndex]

plt.scatter(bill,tip,color='green')

plt.xlabel("Total Bill")
plt.ylabel("Tip")
plt.show()
plt.scatter(bill,tip,color='green')
plt.plot(xsort,ypred[SortIndex],color='red',linewidth=5)

plt.xlabel("Total Bill")
plt.ylabel("Tip")




EM
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.cluster import KMeans
import pandas as pd
import numpy as np

iris=datasets.load_iris()
X=pd.DataFrame(iris.data)
X.columns=['sepal_Length','Sepal_Width','Petal_Length','Petal_Width']
y=pd.DataFrame(iris.target)
y.columns=['Targets']

model=KMeans(n_clusters=3)
model.fit(X)



plt.figure(figsize=(14,14))
colormap=np.array(['red','lime','black'])

plt.subplot(2,2,1)
plt.scatter(X.Petal_Length,X.Petal_Width,c=colormap[y.Targets],s=40)
plt.title('Real Clusters')
plt.xlabel('Petal length')
plt.ylabel('Petal width')

plt.subplot(2,2,2)
plt.scatter(X.Petal_Length,X.Petal_Width,c=colormap[model.labels_],s=40)
plt.title('K-Means Clustering')
plt.xlabel('petal Length')
plt.ylabel('Petal width')

from sklearn import preprocessing
scaler=preprocessing.StandardScaler()
scaler.fit(X)
xsa=scaler.transform(X)
xs=pd.DataFrame(xsa,columns=X.columns)

from sklearn.mixture import GaussianMixture
gmm=GaussianMixture(n_components=3)
gmm.fit(xs)
gmm_y=gmm.predict(xs)





plt.subplot(2,2,3)
plt.scatter(X.Petal_Length,X.Petal_Width,c=colormap[gmm_y],s=40)
plt.title('GMM Clustering')
plt.xlabel('Petal Length')
plt.ylabel('Petal Width')

print('Observation: The GMM using EM algorithm based clustering matched the true labels more closely than the KMeans.')
